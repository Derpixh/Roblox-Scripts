local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

local localPlayer = Players.LocalPlayer
local myHumanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
local keyPressed = {}

local updateInterval = 0.08
local lastUpdate = 0

local function updateMeshParts()
    local model = game.Workspace:FindFirstChild(localPlayer.Name)
    if model then
        local parts = {
            "LeftHand",
            "LeftUpperArm",
            "LeftLowerArm",
            "RightHand",
            "RightUpperArm",
            "RightLowerArm"
        }

        for _, partName in ipairs(parts) do
            local part = model:FindFirstChild(partName, true)
            if part and part:IsA("MeshPart") then
                local newSize = part.Size
                newSize = Vector3.new(newSize.X * 3.5, 2.5, newSize.Z)
                part.Size = newSize
                part.Transparency = 0.5
            end
        end
    else
        print("Model '" .. localPlayer.Name .. "' not found in the Workspace.")
    end
end

local function highlightTeamModels()
    local localTeam = localPlayer.Team
    if localTeam then
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= localPlayer.Name then
                local model = Workspace:FindFirstChild(player.Name)
                if model then
                    local highlight = model:FindFirstChildOfClass("Highlight")
                    if not highlight then
                        highlight = Instance.new("Highlight")
                        highlight.Parent = model
                    end
                    highlight.FillColor = player.TeamColor.Color
                    highlight.OutlineColor = player.TeamColor.Color
                end
            end
        end
    end
end

if localPlayer then
    local playerGui = localPlayer:WaitForChild("PlayerGui")
    local visualScreenGui = playerGui:WaitForChild("Visual")
    local shootingFrame = visualScreenGui:WaitForChild("Shooting")
    local barFrame = shootingFrame:WaitForChild("Bar")

    local shootingGif = visualScreenGui:FindFirstChild("ShootingGif")
    if shootingGif then
        shootingGif:Destroy()
    end

    local isKeyPressed = false

    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.E then
            isKeyPressed = true
        end
    end)

    UserInputService.InputEnded:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.E then
            isKeyPressed = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        if isKeyPressed then
            barFrame.Size = UDim2.new(1, 0, 1, 0)
            wait(0.001)
        end
        highlightTeamModels()
    end)
end

updateMeshParts()

UserInputService.InputBegan:Connect(function(input)
    if (input.KeyCode == Enum.KeyCode.C or input.KeyCode == Enum.KeyCode.Z) and not keyPressed[input.KeyCode] then
        keyPressed[input.KeyCode] = true
        VirtualInputManager:SendKeyEvent(true, input.KeyCode, false, game)
        VirtualInputManager:SendKeyEvent(false, input.KeyCode, false, game)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.C or input.KeyCode == Enum.KeyCode.Z then
        keyPressed[input.KeyCode] = false
    end
end)

RunService.Heartbeat:Connect(function(deltaTime)
    lastUpdate = lastUpdate + deltaTime
    if lastUpdate >= updateInterval then
        highlightTeamModels()
        lastUpdate = 0
    end
end)
