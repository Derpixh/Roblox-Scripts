local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

local localPlayer = Players.LocalPlayer
local myHumanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
local keyPressed = {}

local movementEnabled = false
local updateInterval = 0.08 -- Update interval set to 80 milliseconds
local forwardOffset = 3
local lastUpdate = 0

-- Function to update MeshParts of the model
local function updateMeshParts()
    local model = game.Workspace:FindFirstChild(localPlayer.Name)
    if model then
        local parts = {
            "LeftHand",
            "LeftUpperArm",
            "LeftLowerArm",
            "RightHand",
            "RightUpperArm",
            "RightLowerArm"
        }

        for _, partName in ipairs(parts) do
            local part = model:FindFirstChild(partName, true)
            if part and part:IsA("MeshPart") then
                -- Adjust the dimensions and transparency of the MeshPart
                local newSize = part.Size
                newSize = Vector3.new(newSize.X * 3.5, 2.5, newSize.Z) -- Set width to 3.5 and height to 2.5
                part.Size = newSize
                part.Transparency = 0.5 -- Make the MeshPart half transparent
            end
        end
    else
        print("Model '" .. localPlayer.Name .. "' not found in the Workspace.")
    end
end

-- Function to highlight models in the Workspace
local function highlightTeamModels()
    local localTeam = localPlayer.Team
    if localTeam then
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Team == localTeam and player.Name ~= localPlayer.Name then
                local model = game.Workspace:FindFirstChild(player.Name)
                if model then
                    if not model:FindFirstChildOfClass("Highlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = Color3.fromRGB(0, 0, 255) -- Blue
                        highlight.OutlineColor = Color3.fromRGB(0, 0, 139) -- Dark Blue
                        highlight.Parent = model
                    end
                end
            end
        end
    end
end

-- Function to find the closest basketball part
local function findClosestBasketballPart()
    local closestBasketball = nil
    local closestDistance = math.huge

    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "Basketball" then
            local distance = (localPlayer.Character.PrimaryPart.Position - part.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestBasketball = part
            end
        end
    end

    return closestBasketball
end

-- Function to find the closest attach part
local function findClosestAttachPart()
    local closestAttachPart = nil
    local closestDistance = math.huge
    local closestModel = nil

    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") and Players:GetPlayerFromCharacter(model) then
            local basketballTool = model:FindFirstChild("Basketball")
            if basketballTool and basketballTool:FindFirstChild("Attach") then
                local attachPart = basketballTool:FindFirstChild("Attach")
                local player = Players:GetPlayerFromCharacter(model)
                if player and player.Team ~= localPlayer.Team then
                    local distance = (localPlayer.Character.PrimaryPart.Position - attachPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestAttachPart = attachPart
                        closestModel = model
                    end
                end
            end
        end
    end

    return closestAttachPart, closestModel
end

-- Function to update movement
local function updateMovement()
    if movementEnabled then
        local basketballPart = findClosestBasketballPart()
        local attachPart, model = findClosestAttachPart()

        if basketballPart then
            myHumanoid:MoveTo(basketballPart.Position)
        elseif attachPart and model then
            local modelPrimaryPart = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildOfClass("Part")
            if modelPrimaryPart then
                local modelPosition = modelPrimaryPart.Position
                local forwardVector = modelPrimaryPart.CFrame.LookVector
                local targetPosition = modelPosition + forwardVector * forwardOffset
                myHumanoid:MoveTo(targetPosition)
            end
        else
            myHumanoid:Move(Vector3.new(0, 0, 0), false)
        end
    end
end

-- Function to handle key press
local function onKeyPress(input)
    if input.KeyCode == Enum.KeyCode.T then
        movementEnabled = not movementEnabled
        if not movementEnabled then
            myHumanoid:Move(Vector3.new(0, 0, 0), false)
        end
    end
end

-- Continuously update the size of the Bar Frame when E is pressed
if localPlayer then
    local playerGui = localPlayer:WaitForChild("PlayerGui")
    local visualScreenGui = playerGui:WaitForChild("Visual")
    local shootingFrame = visualScreenGui:WaitForChild("Shooting")
    local barFrame = shootingFrame:WaitForChild("Bar")

    -- Delete the ShootingGif frame if it exists
    local shootingGif = visualScreenGui:FindFirstChild("ShootingGif")
    if shootingGif then
        shootingGif:Destroy()
    end

    local isKeyPressed = false

    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.E then
            isKeyPressed = true
        end
    end)

    UserInputService.InputEnded:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.E then
            isKeyPressed = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        if isKeyPressed then
            barFrame.Size = UDim2.new(1, 0, 1, 0)
            wait(0.001)  -- 1 millisecond wait
        end
        highlightTeamModels() -- Continuously check and add highlight if needed
        updateMovement()
    end)
end

-- Call the function to update the MeshParts initially
updateMeshParts()

-- New code to handle virtual key presses for C and Z
UserInputService.InputBegan:Connect(function(input)
    if (input.KeyCode == Enum.KeyCode.C or input.KeyCode == Enum.KeyCode.Z) and not keyPressed[input.KeyCode] then
        keyPressed[input.KeyCode] = true
        VirtualInputManager:SendKeyEvent(true, input.KeyCode, false, game)
        VirtualInputManager:SendKeyEvent(false, input.KeyCode, false, game)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.C or input.KeyCode == Enum.KeyCode.Z then
        keyPressed[input.KeyCode] = false
    end
end)

-- Connect the movement update function to the RunService.Heartbeat event
RunService.Heartbeat:Connect(function(deltaTime)
    lastUpdate = lastUpdate + deltaTime
    if lastUpdate >= updateInterval then
        updateMovement()
        lastUpdate = 0
    end
end)

-- Connect the key press handler to the UserInputService.InputBegan event
UserInputService.InputBegan:Connect(onKeyPress)
