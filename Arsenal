local Players = game:GetService("Players")
local Teams = game:GetService("Teams")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")

local circle = Drawing.new("Circle")
circle.Thickness = 3
circle.NumSides = 50
circle.Radius = 75
circle.Visible = true
circle.Filled = false
circle.Color = Color3.new(1, 1, 1)

local ESPBoxes = {}

local function createESPBox(player)
    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = Color3.new(1, 0, 0)
    box.Thickness = 2
    box.Transparency = 1
    box.Filled = false

    local nameTag = Drawing.new("Text")
    nameTag.Visible = false
    nameTag.Color = Color3.new(1, 1, 1)
    nameTag.Center = true
    nameTag.Outline = true
    nameTag.Size = 20
    nameTag.Text = player.Name

    ESPBoxes[player] = {Box = box, NameTag = nameTag}
end

local function removeESPBox(player)
    if ESPBoxes[player] then
        ESPBoxes[player].Box:Remove()
        ESPBoxes[player].NameTag:Remove()
        ESPBoxes[player] = nil
    end
end

local function updateESPBoxes()
    for player, drawings in pairs(ESPBoxes) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local rootPart = character.HumanoidRootPart
            local rootPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

            if onScreen then
                drawings.Box.Size = Vector2.new(1200 / rootPos.Z, 2400 / rootPos.Z)  -- Increased size
                drawings.Box.Position = Vector2.new(rootPos.X - drawings.Box.Size.X / 2, rootPos.Y - drawings.Box.Size.Y / 2)
                drawings.Box.Visible = true

                drawings.NameTag.Position = Vector2.new(rootPos.X, rootPos.Y - drawings.Box.Size.Y / 2 - 20)
                drawings.NameTag.Visible = true
            else
                drawings.Box.Visible = false
                drawings.NameTag.Visible = false
            end
        else
            removeESPBox(player)
        end
    end
end

RunService.RenderStepped:Connect(function()
    local mousePos = UserInputService:GetMouseLocation()
    circle.Position = Vector2.new(mousePos.X, mousePos.Y)
    updateESPBoxes()
end)

local function isPlayerInFOV(targetHead)
    local mousePos = UserInputService:GetMouseLocation()
    local screenPoint = Camera:WorldToViewportPoint(targetHead.Position)
    local distanceFromCircle = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mousePos.X, mousePos.Y)).magnitude

    return distanceFromCircle <= circle.Radius
end

local function getNearestVisibleEnemyPlayerInFOV()
    local localPlayer = Players.LocalPlayer
    local localTeam = localPlayer.Team
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Team ~= localTeam and player.Character and player.Character:FindFirstChild("Head") then
            if not ESPBoxes[player] then
                createESPBox(player)
            end
            local targetHead = player.Character.Head
            local origin = Camera.CFrame.Position
            local direction = (targetHead.Position - origin).Unit * (targetHead.Position - origin).magnitude

            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {localPlayer.Character}

            local raycastResult = workspace:Raycast(origin, direction, raycastParams)

            if raycastResult and raycastResult.Instance:IsDescendantOf(player.Character) and isPlayerInFOV(targetHead) then
                local distance = (targetHead.Position - localPlayer.Character.Head.Position).magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestPlayer = player
                end
            end
        else
            removeESPBox(player)
        end
    end

    return nearestPlayer
end

local function updateCamera()
    local nearestVisibleEnemyPlayerInFOV = getNearestVisibleEnemyPlayerInFOV()

    if nearestVisibleEnemyPlayerInFOV and nearestVisibleEnemyPlayerInFOV.Character and nearestVisibleEnemyPlayerInFOV.Character:FindFirstChild("Head") then
        local targetHead = nearestVisibleEnemyPlayerInFOV.Character.Head
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetHead.Position)
    end
end

RunService.RenderStepped:Connect(updateCamera)
