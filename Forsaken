local PROXIMITY_DISTANCE = 15

local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local playerGui = player:WaitForChild("PlayerGui")

local map = workspace:WaitForChild("Map")
local ingame = map:WaitForChild("Ingame")

local function getMainModel()
	for _, obj in ipairs(ingame:GetChildren()) do
		if obj:IsA("Model") then
			return obj
		end
	end
end

local function getGenerators(mainModel)
	local generators = {}
	for _, gen in ipairs(mainModel:GetChildren()) do
		if gen:IsA("Model") and gen.Name == "Generator" then
			local remotes = gen:FindFirstChild("Remotes")
			local remoteEvent = remotes and remotes:FindFirstChild("RE")
			if remoteEvent and remoteEvent:IsA("RemoteEvent") then
				table.insert(generators, {
					model = gen,
					remote = remoteEvent
				})
			end
		end
	end
	return generators
end

local function getNearestGenerator(generators, position)
	local nearest = nil
	local shortestDistance = math.huge

	for _, data in ipairs(generators) do
		local genPos = data.model:GetModelCFrame().Position
		local distance = (genPos - position).Magnitude

		if distance < shortestDistance then
			shortestDistance = distance
			nearest = data
		end
	end

	if nearest and shortestDistance <= PROXIMITY_DISTANCE then
		return nearest
	end

	return nil
end

local mainModel = getMainModel()
local generators = mainModel and getGenerators(mainModel) or {}

task.spawn(function()
	while true do
		wait()

		local puzzleUI = playerGui:FindFirstChild("PuzzleUI")
		if puzzleUI and puzzleUI:IsA("ScreenGui") and puzzleUI.Enabled then
			local nearestGen = getNearestGenerator(generators, humanoidRootPart.Position)
			if nearestGen then
				nearestGen.remote:FireServer()
				wait(1)
			end
		end
	end
end)
