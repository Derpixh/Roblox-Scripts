local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local generatorsTab = window:CreateTab("Generators")
local autoCompleteToggle = generatorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    Flag = "AutoGenerators",
    Callback = function(value)
        _G.AutoGeneratorsEnabled = value
        if value then
            Rayfield:Notify({
                Title = "Generators",
                Content = "Auto Generators Enabled",
                Duration = 3,
                Image = 4483362458
            })
        else
            Rayfield:Notify({
                Title = "Generators",
                Content = "Auto Generators Disabled",
                Duration = 3,
                Image = 4483362458
            })
        end
    end
})

local function findNearestGenerator()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return nil end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return nil end
    
    local generators = workspace:WaitForChild("Map"):WaitForChild("Ingame"):WaitForChild("Map"):GetChildren()
    local nearest = nil
    local minDistance = math.huge
    
    for _, obj in pairs(generators) do
        if obj.Name == "Generator" and obj:FindFirstChild("Remotes") then
            local distance = (rootPart.Position - obj:GetPivot().Position).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearest = obj
            end
        end
    end
    
    return nearest
end

spawn(function()
    while wait() do
        if _G.AutoGeneratorsEnabled then
            local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
            if playerGui:FindFirstChild("PuzzleUI") then
                local generator = findNearestGenerator()
                if generator then
                    while _G.AutoGeneratorsEnabled and playerGui:FindFirstChild("PuzzleUI") do
                        generator:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
                        wait(1.25)
                    end
                end
            end
        end
    end
end)

local espSection = generatorsTab:CreateSection("ESP")

local autoHighlightToggle = generatorsTab:CreateToggle({
    Name = "Auto Highlight Generators",
    CurrentValue = false,
    Flag = "AutoHighlight",
    SectionParent = espSection,
    Callback = function(value)
        _G.AutoHighlightEnabled = value
        if value then
            Rayfield:Notify({
                Title = "ESP",
                Content = "Auto Highlight Generators Enabled",
                Duration = 3,
                Image = 4483362458
            })
            startHighlighting()
        else
            Rayfield:Notify({
                Title = "ESP",
                Content = "Auto Highlight Generators Disabled",
                Duration = 3,
                Image = 4483362458
            })
            clearHighlights()
        end
    end
})

local function getGenerators()
    local generators = {}
    local success, map = pcall(function() return workspace:WaitForChild("Map") end)
    if success then
        local inGame = map:FindFirstChild("Ingame")
        if inGame then
            local mapModel = inGame:FindFirstChild("Map")
            if mapModel then
                for _, obj in pairs(mapModel:GetChildren()) do
                    if obj.Name == "Generator" then
                        table.insert(generators, obj)
                    end
                end
            end
        end
    end
    return generators
end

local function monitorProgress(generator)
    spawn(function()
        while _G.AutoHighlightEnabled and generator.Parent do
            local progress = generator:FindFirstChild("Progress")
            if progress and progress:IsA("NumberValue") then
                if progress.Value == 100 then
                    local highlight = generator:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end
                    break
                end
            end
            wait()
        end
    end)
end

local function applyHighlight(generator)
    if not generator:FindFirstChildOfClass("Highlight") then
        local progress = generator:FindFirstChild("Progress")
        if progress and progress:IsA("NumberValue") and progress.Value < 100 then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 0)
            highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
            highlight.Parent = generator
            monitorProgress(generator)
        end
    end
end

local function clearHighlights()
    for _, generator in pairs(getGenerators()) do
        local highlight = generator:FindFirstChildOfClass("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

local function startHighlighting()
    spawn(function()
        while _G.AutoHighlightEnabled do
            for _, generator in pairs(getGenerators()) do
                applyHighlight(generator)
            end
            wait()
        end
    end)
end

Rayfield:LoadConfiguration()
