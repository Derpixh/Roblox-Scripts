local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local GeneratorsTab = window:CreateTab("Generators")

local AutoCompleteToggle = GeneratorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    Flag = "AutoCompleteGenerators",
    Callback = function(Value)
        if Value then
            local player = game:GetService("Players").LocalPlayer
            local runService = game:GetService("RunService")
            local puzzleUIExists = false
            local nearestGenerator = nil
            local connection = nil
            
            local function findNearestGenerator()
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                
                local mapFolder = workspace:WaitForChild("Map")
                local ingameFolder = mapFolder:WaitForChild("Ingame")
                local mapModel = ingameFolder:WaitForChild("Map")
                
                local closestDistance = math.huge
                local closestGenerator = nil
                
                for _, child in ipairs(mapModel:GetChildren()) do
                    if child.Name == "Generator" and child:IsA("Model") then
                        local generatorPart = child:FindFirstChildOfClass("Part")
                        if generatorPart then
                            local distance = (humanoidRootPart.Position - generatorPart.Position).Magnitude
                            if distance < closestDistance then
                                closestDistance = distance
                                closestGenerator = child
                            end
                        end
                    end
                end
                
                return closestGenerator
            end
            
            local function checkForPuzzleUI()
                local playerGui = player:WaitForChild("PlayerGui")
                local puzzleUI = playerGui:FindFirstChild("PuzzleUI")
                return puzzleUI ~= nil
            end
            
            connection = runService.Heartbeat:Connect(function()
                nearestGenerator = findNearestGenerator()
                local currentPuzzleUIStatus = checkForPuzzleUI()
                
                if currentPuzzleUIStatus ~= puzzleUIExists then
                    puzzleUIExists = currentPuzzleUIStatus
                    
                    if puzzleUIExists then
                        while puzzleUIExists and AutoCompleteToggle.CurrentValue and nearestGenerator do
                            local remotes = nearestGenerator:FindFirstChild("Remotes")
                            if remotes then
                                local re = remotes:FindFirstChild("RE")
                                if re and re:IsA("RemoteEvent") then
                                    re:FireServer()
                                end
                            end
                            wait(1)
                            puzzleUIExists = checkForPuzzleUI()
                            nearestGenerator = findNearestGenerator()
                        end
                    end
                end
            end)
            
            AutoCompleteToggle.connection = connection
        else
            if AutoCompleteToggle.connection then
                AutoCompleteToggle.connection:Disconnect()
                AutoCompleteToggle.connection = nil
            end
        end
    end,
})
