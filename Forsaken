local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local generatorsTab = window:CreateTab("Generators")
local completeSection = generatorsTab:CreateSection("Complete")

local autoCompleteActive = false

local PROXIMITY_DISTANCE = 15

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local playerGui = player:WaitForChild("PlayerGui")

local function getAllGenerators()
    local generatorModels = {}
    local mapFolder = workspace:WaitForChild("Map"):WaitForChild("Ingame"):WaitForChild("Map")

    for _, obj in ipairs(mapFolder:GetChildren()) do
        if obj:IsA("Model") and obj.Name == "Generator" then
            local remotes = obj:FindFirstChild("Remotes")
            local remoteEvent = remotes and remotes:FindFirstChild("RE")
            if remoteEvent and remoteEvent:IsA("RemoteEvent") then
                table.insert(generatorModels, {
                    model = obj,
                    remote = remoteEvent
                })
            end
        end
    end

    return generatorModels
end

local function getNearestGenerator(generators, position)
    local nearest = nil
    local shortestDistance = math.huge

    for _, entry in ipairs(generators) do
        local genPos = entry.model:GetModelCFrame().Position
        local distance = (genPos - position).Magnitude

        if distance < shortestDistance then
            shortestDistance = distance
            nearest = entry
        end
    end

    if nearest and shortestDistance <= PROXIMITY_DISTANCE then
        return nearest
    end

    return nil
end

local function autoCompleteGenerators()
    local generators = getAllGenerators()
    while autoCompleteActive do
        wait()

        local puzzleUI = playerGui:FindFirstChild("PuzzleUI")
        if puzzleUI and puzzleUI:IsA("ScreenGui") and puzzleUI.Enabled then
            local nearestGen = getNearestGenerator(generators, humanoidRootPart.Position)
            if nearestGen then
                nearestGen.remote:FireServer()
                wait(1)
            end
        end
    end
end

local autoCompleteToggle = generatorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    SectionParent = completeSection,
    Callback = function(state)
        autoCompleteActive = state
        if state then
            Rayfield:Notify({
                Title = "Success!",
                Content = "Auto Complete Generators Enabled!"
            })
            task.spawn(autoCompleteGenerators)
        else
            Rayfield:Notify({
                Title = "Success!",
                Content = "Auto Complete Generators Disabled!"
            })
        end
    end
})

Rayfield:LoadConfiguration()
