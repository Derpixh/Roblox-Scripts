local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local generatorsTab = window:CreateTab("Generators")

local autoCompleteToggle = generatorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    Flag = "AutoGenerators",
    Callback = function(value)
        _G.AutoGeneratorsEnabled = value
        if value then
            Rayfield:Notify({
                Title = "Generators",
                Content = "Auto Generators Enabled",
                Duration = 3,
                Image = 4483362458
            })
        else
            Rayfield:Notify({
                Title = "Generators",
                Content = "Auto Generators Disabled",
                Duration = 3,
                Image = 4483362458
            })
        end
    end
})

local function findNearestGenerator()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return nil end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return nil end
    local generators = workspace:WaitForChild("Map"):WaitForChild("Ingame"):WaitForChild("Map"):GetChildren()
    local nearest = nil
    local minDistance = math.huge
    for _, obj in pairs(generators) do
        if obj.Name == "Generator" and obj:FindFirstChild("Remotes") then
            local distance = (rootPart.Position - obj:GetPivot().Position).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearest = obj
            end
        end
    end
    return nearest
end

spawn(function()
    while wait() do
        if _G.AutoGeneratorsEnabled then
            local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
            if playerGui:FindFirstChild("PuzzleUI") then
                local generator = findNearestGenerator()
                if generator then
                    while _G.AutoGeneratorsEnabled and playerGui:FindFirstChild("PuzzleUI") do
                        generator:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
                        wait(1.25)
                    end
                end
            end
        end
    end
end)

local function getGenerators()
    local generators = {}
    local success, map = pcall(function() return workspace:WaitForChild("Map") end)
    if not success then return generators end
    local inGame = map:FindFirstChild("Ingame")
    if not inGame then return generators end
    local mapModel = inGame:FindFirstChild("Map")
    if not mapModel then return generators end
    for _, obj in pairs(mapModel:GetChildren()) do
        if obj.Name == "Generator" then
            table.insert(generators, obj)
        end
    end
    return generators
end

local function monitorProgress(generator)
    if not generator or not generator.Parent then return end
    local progress = generator:FindFirstChild("Progress")
    if not progress or not progress:IsA("NumberValue") then return end
    while _G.AutoHighlightEnabled and generator.Parent do
        if progress.Value == 100 then
            local highlight = generator:FindFirstChildOfClass("Highlight")
            if highlight then
                highlight:Destroy()
            end
            break
        end
        wait()
    end
end

local function applyHighlight(generator)
    if not generator or generator:FindFirstChildOfClass("Highlight") then return end
    local progress = generator:FindFirstChild("Progress")
    if not progress or not progress:IsA("NumberValue") then return end
    if progress.Value < 100 then
        local highlight = Instance.new("Highlight")
        highlight.FillColor = Color3.fromRGB(0, 255, 0)
        highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
        highlight.Parent = generator
        spawn(function() monitorProgress(generator) end)
    end
end

local function clearHighlights()
    for _, generator in pairs(getGenerators()) do
        local highlight = generator:FindFirstChildOfClass("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

local function startHighlighting()
    spawn(function()
        while _G.AutoHighlightEnabled do
            for _, generator in pairs(getGenerators()) do
                if not _G.AutoHighlightEnabled then break end
                applyHighlight(generator)
            end
            wait()
        end
    end)
end

local espSection = generatorsTab:CreateSection("ESP")

local autoHighlightToggle = generatorsTab:CreateToggle({
    Name = "Auto Highlight Generators",
    CurrentValue = false,
    Flag = "AutoHighlight",
    SectionParent = espSection,
    Callback = function(value)
        _G.AutoHighlightEnabled = value
        if value then
            Rayfield:Notify({
                Title = "ESP",
                Content = "Auto Highlight Generators Enabled",
                Duration = 3,
                Image = 4483362458
            })
            startHighlighting()
        else
            Rayfield:Notify({
                Title = "ESP",
                Content = "Auto Highlight Generators Disabled",
                Duration = 3,
                Image = 4483362458
            })
            clearHighlights()
        end
    end
})

local playersTab = window:CreateTab("Players")
local playersEspSection = playersTab:CreateSection("ESP")

local function getPlayerRole()
    local playersFolder = workspace:FindFirstChild("Players")
    if not playersFolder then return nil end
    
    local localPlayerName = game.Players.LocalPlayer.Name
    
    local survivorsFolder = playersFolder:FindFirstChild("Survivors")
    if survivorsFolder then
        for _, model in pairs(survivorsFolder:GetChildren()) do
            if model:IsA("Model") and model:GetAttribute("Username") == localPlayerName then
                return "survivor"
            end
        end
    end
    
    local killersFolder = playersFolder:FindFirstChild("Killers")
    if killersFolder then
        for _, model in pairs(killersFolder:GetChildren()) do
            if model:IsA("Model") and model:GetAttribute("Username") == localPlayerName then
                return "killer"
            end
        end
    end
    
    return nil
end

local function getTargetModels()
    local targets = {}
    local playersFolder = workspace:FindFirstChild("Players")
    if not playersFolder then return targets end
    
    local role = getPlayerRole()
    local localPlayerName = game.Players.LocalPlayer.Name
    
    if role == "survivor" then
        local killersFolder = playersFolder:FindFirstChild("Killers")
        if killersFolder then
            for _, model in pairs(killersFolder:GetChildren()) do
                if model:IsA("Model") and model:GetAttribute("Username") and model:GetAttribute("Username") ~= localPlayerName then
                    table.insert(targets, {model = model, isKiller = true})
                end
            end
        end
    elseif role == "killer" then
        local survivorsFolder = playersFolder:FindFirstChild("Survivors")
        if survivorsFolder then
            for _, model in pairs(survivorsFolder:GetChildren()) do
                if model:IsA("Model") and model:GetAttribute("Username") and model:GetAttribute("Username") ~= localPlayerName then
                    table.insert(targets, {model = model, isKiller = false})
                end
            end
        end
    end
    
    return targets
end

local function applyPlayerHighlight(model, isKiller)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.FillColor = isKiller and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 165, 0)
        highlight.OutlineColor = isKiller and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 165, 0)
        highlight.Parent = model
    end
end

local function clearPlayerHighlights()
    local playersFolder = workspace:FindFirstChild("Players")
    if not playersFolder then return end
    
    local foldersToCheck = {"Survivors", "Killers"}
    for _, folderName in pairs(foldersToCheck) do
        local folder = playersFolder:FindFirstChild(folderName)
        if folder then
            for _, model in pairs(folder:GetChildren()) do
                local highlight = model:FindFirstChildOfClass("Highlight")
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end
end

local function monitorPlayerRoles()
    spawn(function()
        while _G.AutoHighlightPlayersEnabled do
            local currentTargets = getTargetModels()
            for _, target in pairs(currentTargets) do
                if _G.AutoHighlightPlayersEnabled then
                    applyPlayerHighlight(target.model, target.isKiller)
                end
            end
            wait()
        end
    end)
end

local autoHighlightPlayersToggle = playersTab:CreateToggle({
    Name = "Auto Highlight Enemies/Survivors (Depends If You're A Survivor Or Killer)",
    CurrentValue = false,
    Flag = "AutoHighlightPlayers",
    SectionParent = playersEspSection,
    Callback = function(value)
        _G.AutoHighlightPlayersEnabled = value
        if value then
            Rayfield:Notify({
                Title = "Player ESP",
                Content = "Auto Highlight Enemies/Survivors Enabled",
                Duration = 3,
                Image = 4483362458
            })
            monitorPlayerRoles()
        else
            Rayfield:Notify({
                Title = "Player ESP",
                Content = "Auto Highlight Enemies/Survivors Disabled",
                Duration = 3,
                Image = 4483362458
            })
            clearPlayerHighlights()
        end
    end
})

Rayfield:LoadConfiguration()
