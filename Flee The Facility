local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Flee The Facility - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local computersTab = window:CreateTab("Computers")
local espSection = computersTab:CreateSection("ESP")

local highlightEnabled = false

local function highlightComputers()
    while highlightEnabled do
        local map = workspace:FindFirstChild("Sewer Treatment Plant by Jackz0_o") or workspace:FindFirstChild("Arctic Station by CodedAbyss") or workspace:FindFirstChild("Homestead by MrWindy")
        if map then
            for _, model in ipairs(map:GetChildren()) do
                if model:IsA("Model") and model.Name == "ComputerTable" then
                    if not model:FindFirstChild("Highlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = Color3.fromRGB(0, 255, 255)
                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                        highlight.Parent = model
                        highlight.Adornee = model
                    end
                end
            end
        end
        wait()
    end
end

local function removeHighlights()
    local map = workspace:FindFirstChild("Sewer Treatment Plant by Jackz0_o") or workspace:FindFirstChild("Arctic Station by CodedAbyss") or workspace:FindFirstChild("Homestead by MrWindy")
    if map then
        for _, model in ipairs(map:GetChildren()) do
            if model:IsA("Model") and model.Name == "ComputerTable" then
                local highlight = model:FindFirstChild("Highlight")
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end
end

computersTab:CreateToggle({
    Name = "Highlight Computers",
    SectionParent = espSection,
    CurrentValue = false,
    Callback = function(value)
        highlightEnabled = value
        if value then
            Rayfield:Notify({Title = "Success!", Content = "Highlight Computers Enabled!", Duration = 3})
            spawn(highlightComputers)
        else
            Rayfield:Notify({Title = "Success!", Content = "Highlight Computers Disabled!", Duration = 3})
            removeHighlights()
        end
    end
})

local circleSection = computersTab:CreateSection("Circle")

local autoCircleCheckEnabled = false

local function autoCircleCheck()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local player = game.Players.LocalPlayer
    while autoCircleCheckEnabled do
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local screenGui = playerGui:FindFirstChild("ScreenGui")
            if screenGui then
                local timingCircle = screenGui:FindFirstChild("TimingCircle")
                if timingCircle then
                    local timingBase = timingCircle:FindFirstChild("TimingBase")
                    local timingPin = timingCircle:FindFirstChild("TimingPin")
                    if timingBase and timingPin then
                        if timingPin.Position == timingBase.Position then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
                            wait(0.1)
                            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
                        end
                    end
                end
            end
        end
        wait()
    end
end

computersTab:CreateToggle({
    Name = "Auto Complete Circle Check",
    SectionParent = circleSection,
    CurrentValue = false,
    Callback = function(value)
        autoCircleCheckEnabled = value
        if value then
            Rayfield:Notify({Title = "Success!", Content = "Auto Complete Circle Check Enabled!", Duration = 3})
            spawn(autoCircleCheck)
        else
            Rayfield:Notify({Title = "Success!", Content = "Auto Complete Circle Check Disabled!", Duration = 3})
        end
    end
})

Rayfield:LoadConfiguration()
