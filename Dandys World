local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Dandys World - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local twistedsTab = window:CreateTab("Twisteds")
local twistedsSection = twistedsTab:CreateSection("Twisteds")

local highlightToggleEnabled = false

local function removeHighlights()
    local currentRoom = workspace:FindFirstChild("CurrentRoom")
    if currentRoom then
        for _, model in ipairs(currentRoom:GetChildren()) do
            if model:IsA("Model") then
                local monstersFolder = model:FindFirstChild("Monsters")
                if monstersFolder then
                    for _, monster in ipairs(monstersFolder:GetChildren()) do
                        if monster:IsA("Model") then
                            local highlight = monster:FindFirstChildOfClass("Highlight")
                            if highlight then
                                highlight:Destroy()
                            end
                        end
                    end
                end
            end
        end
    end
end

local highlightToggle = twistedsTab:CreateToggle({
    Name = "Highlight Twisteds (You Can Enable/Disable It)",
    SectionParent = twistedsSection,
    CurrentValue = false,
    Callback = function(value)
        highlightToggleEnabled = value

        if not value then
            highlightToggleEnabled = false
            removeHighlights()
            return
        end

        while highlightToggleEnabled do
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, model in ipairs(currentRoom:GetChildren()) do
                    if model:IsA("Model") then
                        local monstersFolder = model:FindFirstChild("Monsters")
                        if monstersFolder then
                            for _, monster in ipairs(monstersFolder:GetChildren()) do
                                if monster:IsA("Model") then
                                    if not monster:FindFirstChildOfClass("Highlight") then
                                        local highlight = Instance.new("Highlight")
                                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                                        highlight.Parent = monster
                                    end
                                end
                            end
                        end
                    end
                end
            end
            wait()
        end
    end
})

local itemsTab = window:CreateTab("Items")

local itemsSection = itemsTab:CreateSection("Items")

local autoHighlightFlag = false
local function removeHighlights()
    local currentRoom = workspace:FindFirstChild("CurrentRoom")
    if currentRoom then
        local model = currentRoom:FindFirstChildWhichIsA("Model")
        if model then
            local itemsFolder = model:FindFirstChild("Items")
            if itemsFolder then
                for _, item in ipairs(itemsFolder:GetChildren()) do
                    if item:IsA("Model") then
                        local hl = item:FindFirstChildOfClass("Highlight")
                        if hl then
                            hl:Destroy()
                        end
                    end
                end
            end
        end
    end
end

local function monitorItems()
    while autoHighlightFlag do
        local currentRoom = workspace:FindFirstChild("CurrentRoom")
        if currentRoom then
            local model = currentRoom:FindFirstChildWhichIsA("Model")
            if model then
                local itemsFolder = model:FindFirstChild("Items")
                if itemsFolder then
                    for _, item in ipairs(itemsFolder:GetChildren()) do
                        if item:IsA("Model") and not item:FindFirstChildOfClass("Highlight") then
                            local hl = Instance.new("Highlight")
                            hl.FillColor = Color3.fromRGB(0, 255, 0)
                            hl.OutlineColor = Color3.fromRGB(255, 255, 255)
                            hl.Parent = item
                        end
                    end
                end
            end
        end
        wait()
    end
end

itemsTab:CreateToggle({
    Name = "Auto Highlight Items",
    SectionParent = itemsSection,
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            autoHighlightFlag = true
            spawn(monitorItems)
        else
            autoHighlightFlag = false
            removeHighlights()
        end
    end
})

local pickupSection = itemsTab:CreateSection("Pick-Up Items")

local autoPickupFlag = false

local function monitorPickUpItems()
    while autoPickupFlag do
        local currentRoom = workspace:FindFirstChild("CurrentRoom")
        if currentRoom then
            local roomModel = currentRoom:FindFirstChildWhichIsA("Model")
            if roomModel then
                local itemsFolder = roomModel:FindFirstChild("Items")
                if itemsFolder then
                    for _, item in ipairs(itemsFolder:GetChildren()) do
                        if item:IsA("Model") then
                            local promptPart = item:FindFirstChild("Prompt")
                            if promptPart then
                                local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                                if proximityPrompt then
                                    local char = game.Players.LocalPlayer.Character
                                    if char and char:FindFirstChild("HumanoidRootPart") then
                                        local distance = (promptPart.Position - char.HumanoidRootPart.Position).Magnitude
                                        if distance <= proximityPrompt.MaxActivationDistance then
                                            proximityPrompt:InputHoldBegin()
                                            wait()
                                            proximityPrompt:InputHoldEnd()
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.025)
    end
end

itemsTab:CreateToggle({
    Name = "Auto Pick-Up Items",
    SectionParent = pickupSection,
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            autoPickupFlag = true
            spawn(monitorPickUpItems)
        else
            autoPickupFlag = false
        end
    end
})

local useInventorySection = itemsTab:CreateSection("Use Inventory Items")
local autoUseInventoryItems = false
local validItems = {
    Chocolate = true,
    ProteinBar = true,
    SkillCheckCandy = true,
    StealthCandy = true,
    ExtractionSpeedCandy = true,
    Pop = true,
    Gumball = true,
    SpeedCandy = true,
    Jawbreaker = true
}

local keyMapping = {
    Slot1 = Enum.KeyCode.One,
    Slot2 = Enum.KeyCode.Two,
    Slot3 = Enum.KeyCode.Three
}

local function monitorInventory()
    while autoUseInventoryItems do
        local localPlayer = game.Players.LocalPlayer
        local ingamePlayers = workspace:FindFirstChild("InGamePlayers")
        if ingamePlayers then
            local playerModel = ingamePlayers:FindFirstChild(localPlayer.Name)
            if playerModel then
                local inventory = playerModel:FindFirstChild("Inventory")
                if inventory then
                    for _, slotName in ipairs({"Slot1", "Slot2", "Slot3"}) do
                        local slotInstance = inventory:FindFirstChild(slotName)
                        if slotInstance then
                            local currentValue = slotInstance.Value
                            if validItems[currentValue] then
                                local vim = game:GetService("VirtualInputManager")
                                local keyCode = keyMapping[slotName]
                                repeat
                                    vim:SendKeyEvent(true, keyCode, false, game)
                                    wait()
                                    vim:SendKeyEvent(false, keyCode, false, game)
                                    wait()
                                until slotInstance.Value == "None"
                            end
                        end
                    end
                end
            end
        end
        wait()
    end
end

itemsTab:CreateToggle({
    Name = "Auto Use Inventory Items",
    SectionParent = useInventorySection,
    CurrentValue = false,
    Callback = function(enabled)
        autoUseInventoryItems = enabled
        if enabled then
            spawn(monitorInventory)
        end
    end
})

local generatorsTab = window:CreateTab("Generators")
local generatorsSection = generatorsTab:CreateSection("Generators")
local autoHighlightGenerators = false

local function removeGeneratorHighlights()
    local currentRoom = workspace:FindFirstChild("CurrentRoom")
    if currentRoom then
        local roomModel = currentRoom:FindFirstChildWhichIsA("Model")
        if roomModel then
            local generatorsFolder = roomModel:FindFirstChild("Generators")
            if generatorsFolder then
                for _, generator in ipairs(generatorsFolder:GetChildren()) do
                    if generator:IsA("Model") then
                        local highlight = generator:FindFirstChildOfClass("Highlight")
                        if highlight then
                            highlight:Destroy()
                        end
                    end
                end
            end
        end
    end
end

local function monitorGenerators()
    while autoHighlightGenerators do
        local currentRoom = workspace:FindFirstChild("CurrentRoom")
        if currentRoom then
            local roomModel = currentRoom:FindFirstChildWhichIsA("Model")
            if roomModel then
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                if generatorsFolder then
                    for _, generator in ipairs(generatorsFolder:GetChildren()) do
                        if generator:IsA("Model") and generator.Name == "Generator" then
                            if not generator:FindFirstChildOfClass("Highlight") then
                                local highlight = Instance.new("Highlight")
                                highlight.FillColor = Color3.fromRGB(0, 255, 255)
                                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                                highlight.Parent = generator
                            end
                        end
                    end
                end
            end
        end
        wait()
    end
end

generatorsTab:CreateToggle({
    Name = "Auto Highlight Generators",
    SectionParent = generatorsSection,
    CurrentValue = false,
    Callback = function(enabled)
        autoHighlightGenerators = enabled
        if enabled then
            spawn(monitorGenerators)
        else
            removeGeneratorHighlights()
        end
    end
})

Rayfield:LoadConfiguration()
