local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local notifiedMonsters = {}
local notifiedGenerators = {}

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
end

local function isCharacterInFrontOfPrompt(promptPart)
    local characterPosition = character.PrimaryPart.Position
    local promptPosition = promptPart.Position
    local distance = (characterPosition - promptPosition).Magnitude

    return distance < 5 -- Distance threshold for "in front" detection
end

local function checkProximityPrompt()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                for _, folderName in ipairs({"Items", "Generators"}) do
                    local folder = roomModel:FindFirstChild(folderName)
                    if folder then
                        for _, itemModel in pairs(folder:GetChildren()) do
                            if itemModel:IsA("Model") then
                                local promptPart = itemModel:FindFirstChild("Prompt")
                                if promptPart then
                                    local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                                    if proximityPrompt and proximityPrompt.Enabled and not proximityPrompt:GetAttribute("pressed") then
                                        if isCharacterInFrontOfPrompt(promptPart) then
                                            pressKey(Enum.KeyCode.E)
                                            proximityPrompt:SetAttribute("pressed", true)
                                            -- Allow pressing E again after moving away and returning
                                            RunService.Heartbeat:Connect(function()
                                                if not isCharacterInFrontOfPrompt(promptPart) then
                                                    proximityPrompt:SetAttribute("pressed", false)
                                                end
                                            end)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function pressSpacebar()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, nil)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, nil)
end

local function checkSkillCheck()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local screenGui = playerGui:FindFirstChild("ScreenGui")
        if screenGui then
            local menuFrame = screenGui:FindFirstChild("Menu")
            if menuFrame then
                local skillCheckFrame = menuFrame:FindFirstChild("SkillCheckFrame")
                if skillCheckFrame then
                    local marker = skillCheckFrame:FindFirstChild("Marker")
                    local goldArea = skillCheckFrame:FindFirstChild("GoldArea")

                    if marker and goldArea then
                        local markerPos = marker.AbsolutePosition
                        local goldAreaPos = goldArea.AbsolutePosition
                        local goldAreaSize = goldArea.AbsoluteSize

                        if markerPos.X >= goldAreaPos.X and markerPos.X <= (goldAreaPos.X + goldAreaSize.X) then
                            pressSpacebar()
                        end
                    end
                end
            end
        end
    end
end

local function notifyOncePerEvent(model, eventName, notification)
    local modelEvents = notifiedMonsters[model] or {}
    if not modelEvents[eventName] then
        game.StarterGui:SetCore("SendNotification", notification)
        modelEvents[eventName] = true
        notifiedMonsters[model] = modelEvents
    end
end

local function notifyGeneratorCompletion(generatorModel)
    game.StarterGui:SetCore("SendNotification", {
        Title = "Generator Completion",
        Text = "Completing Generator...",
        Duration = 5
    })
end

local function notifyGeneratorCompleted()
    game.StarterGui:SetCore("SendNotification", {
        Title = "Generator Completion",
        Text = "Generator Has Been Completed",
        Duration = 5
    })
end

local function checkGeneratorStatus()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                if generatorsFolder then
                    for _, generatorModel in pairs(generatorsFolder:GetChildren()) do
                        if generatorModel:IsA("Model") then
                            local playerCompletion = generatorModel:FindFirstChild("PlayerCompletion")
                            if playerCompletion then
                                for _, playerCompletionValue in pairs(playerCompletion:GetChildren()) do
                                    if playerCompletionValue:IsA("NumberValue") and playerCompletionValue.Value == player.Name then
                                        if not notifiedGenerators[generatorModel] then
                                            notifyGeneratorCompletion(generatorModel)
                                            notifiedGenerators[generatorModel] = true
                                        end

                                        local stats = generatorModel:FindFirstChild("Stats")
                                        if stats then
                                            local completed = stats:FindFirstChild("Completed")
                                            if completed and completed:IsA("BoolValue") and completed.Value then
                                                notifyGeneratorCompleted()
                                                notifiedGenerators[generatorModel] = nil -- Reset to allow future notifications
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function checkMonsterStatus()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                if monstersFolder then
                    for _, monsterModel in pairs(monstersFolder:GetChildren()) do
                        if monsterModel:IsA("Model") then
                            local chasing = monsterModel:FindFirstChild("Chasing")
                            local chasingValue = monsterModel:FindFirstChild("ChasingValue")
                            
                            if chasing and chasing:IsA("BoolValue") and chasingValue and chasingValue:IsA("StringValue") then
                                if chasing.Value and chasingValue.Value == player.Name then
                                    notifyOncePerEvent(monsterModel, "Chasing", {
                                        Title = "Monster Alerter",
                                        Text = "The " .. monsterModel.Name .. " has started chasing you",
                                        Duration = 5
                                    })
                                elseif notifiedMonsters[monsterModel] and notifiedMonsters[monsterModel]["Chasing"] and chasingValue.Value ~= player.Name then
                                    notifyStopChasing(monsterModel)
                                    notifiedMonsters[monsterModel]["Chasing"] = nil -- Reset to allow future notifications
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    checkSkillCheck()
    checkProximityPrompt()
    checkMonsterStatus()
    checkGeneratorStatus()
end)

local function highlightModels(model, fillColor)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.FillColor = fillColor
        highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
    end
end

local function highlightContents(folder, fillColor)
    if folder then
        for _, child in pairs(folder:GetChildren()) do
            if child:IsA("Model") then
                highlightModels(child, fillColor)
            end
        end
    end
end

local function checkAndHighlight()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                -- Highlighting Generators (Orange)
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                highlightContents(generatorsFolder, Color3.new(1, 0.5, 0))
                
                -- Highlighting Items (Green)
                local itemsFolder = roomModel:FindFirstChild("Items")
                highlightContents(itemsFolder, Color3.new(0, 1, 0))
                
                -- Highlighting Monsters (Red)
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                highlightContents(monstersFolder, Color3.new(1, 0, 0))
            end
        end
    end
end

while true do
    checkAndHighlight()
    wait(0.1)
end
