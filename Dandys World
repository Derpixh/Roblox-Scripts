local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local notifiedItems = {}
local notifiedGenerators = {}
local pressedSlots = {}
local hasPressedE = {}
local notifiedChases = {}

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
end

local function sendNotification(title, text)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5
    })
end

local function sendPickupNotification(itemName)
    sendNotification("Auto Item Collector", itemName .. " has been collected")
end

local function sendItemUsageNotification(itemName)
    if not pressedSlots[itemName] then
        sendNotification("Auto Item Usage", itemName .. " has been used")
        pressedSlots[itemName] = true
    end
end

local function isCharacterNearPrompt(promptPart)
    local characterPosition = character.PrimaryPart.Position
    local promptPosition = promptPart.Position
    return (characterPosition - promptPosition).Magnitude < 5
end

local function isMonsterNearCharacter(monstersFolder)
    local characterPosition = character.PrimaryPart.Position
    for _, monsterModel in pairs(monstersFolder:GetChildren()) do
        if monsterModel:IsA("Model") then
            local monsterPosition = monsterModel.PrimaryPart.Position
            if (characterPosition - monsterPosition).Magnitude < 6 then
                return true
            end
        end
    end
    return false
end

local function checkProximityPrompt()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local itemsFolder = roomModel:FindFirstChild("Items")
                if itemsFolder then
                    for _, itemModel in pairs(itemsFolder:GetChildren()) do
                        if itemModel:IsA("Model") and not notifiedItems[itemModel] then
                            local promptPart = itemModel:FindFirstChild("Prompt")
                            if promptPart then
                                local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                                if proximityPrompt and proximityPrompt.Enabled and isCharacterNearPrompt(promptPart) then
                                    pressKey(Enum.KeyCode.E)
                                    sendPickupNotification(itemModel.Name)
                                    notifiedItems[itemModel] = true
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function notifyOncePerEvent(model, eventName, notification)
    if not notifiedGenerators[model] then
        notifiedGenerators[model] = {}
    end
    if not notifiedGenerators[model][eventName] then
        sendNotification(notification.Title, notification.Text)
        notifiedGenerators[model][eventName] = true
    end
end

local function checkGeneratorStatus()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                if generatorsFolder and monstersFolder then
                    for _, generatorModel in pairs(generatorsFolder:GetChildren()) do
                        if generatorModel:IsA("Model") then
                            local stats = generatorModel:FindFirstChild("Stats")
                            local completed = stats and stats:FindFirstChild("Completed")
                            local promptPart = generatorModel:FindFirstChild("Prompt")
                            local proximityPrompt = promptPart and promptPart:FindFirstChildOfClass("ProximityPrompt")
                            if completed and completed:IsA("BoolValue") and not completed.Value and
                               proximityPrompt and proximityPrompt.Enabled and 
                               isCharacterNearPrompt(promptPart) and not isMonsterNearCharacter(monstersFolder) then
                                if not hasPressedE[generatorModel] then
                                    pressKey(Enum.KeyCode.E)
                                    hasPressedE[generatorModel] = true
                                end
                            else
                                hasPressedE[generatorModel] = nil
                            end

                            local playerCompletion = generatorModel:FindFirstChild("PlayerCompletion")
                            if playerCompletion then
                                for _, playerCompletionValue in pairs(playerCompletion:GetChildren()) do
                                    if playerCompletionValue:IsA("NumberValue") and playerCompletionValue.Name == player.Name then
                                        notifyOncePerEvent(generatorModel, "CompletionStarted", {
                                            Title = "Generator Completion",
                                            Text = "Extracting Ichor..."
                                        })

                                        if completed and completed.Value then
                                            notifyOncePerEvent(generatorModel, "Completed", {
                                                Title = "Generator Completed",
                                                Text = "Extracted Ichor Success!"
                                            })
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function checkInventorySlots()
    local inGamePlayers = game.Workspace:FindFirstChild("InGamePlayers")
    if inGamePlayers then
        local localPlayer = inGamePlayers:FindFirstChild(player.Name)
        if localPlayer then
            local inventory = localPlayer:FindFirstChild("Inventory")
            if inventory then
                local slot1 = inventory:FindFirstChild("Slot1")
                local slot2 = inventory:FindFirstChild("Slot2")
                local slot3 = inventory:FindFirstChild("Slot3")

                local validValues = {
                    "Gumball",
                    "EnigmaCandy",
                    "Bandage",
                    "ProteinBar",
                    "Chocolate",
                    "StealthCandy",
                    "SkillCheckCandy",
                    "SpeedCandy",
                    "ChocolateBox"
                }

                local function checkAndPress(slot, keyCode)
                    slot:GetPropertyChangedSignal("Value"):Connect(function()
                        if table.find(validValues, slot.Value) then
                            VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
                            VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
                            sendItemUsageNotification(slot.Value)
                        elseif slot.Value == "" then
                            sendItemUsageNotification("Item used from slot " .. keyCode.Name)
                        end
                    end)
                end

                checkAndPress(slot1, Enum.KeyCode.One)
                checkAndPress(slot2, Enum.KeyCode.Two)
                checkAndPress(slot3, Enum.KeyCode.Three)
            end
        end
    end
end

local function highlightModels(model, fillColor)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.FillColor = fillColor
        highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
    end
end

local function highlightContents(folder, fillColor)
    if folder then
        for _, child in pairs(folder:GetChildren()) do
            if child:IsA("Model") then
                highlightModels(child, fillColor)
            end
        end
    end
end

local function highlightItemsMonstersGenerators()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                highlightContents(roomModel:FindFirstChild("Items"), Color3.new(0, 1, 0))
                highlightContents(roomModel:FindFirstChild("Monsters"), Color3.new(1, 0, 0))
                highlightContents(roomModel:FindFirstChild("Generators"), Color3.new(1, 0.5, 0))
            end
        end
    end
end

local function removeSkillCheckElements()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local screenGui = playerGui:FindFirstChild("ScreenGui")
        if screenGui then
            local menuFrame = screenGui:FindFirstChild("Menu")
            if menuFrame then
                local elementsToRemove = {"SkillCheckFrame", "SkillCheckMessage", "SpaceBarPromptText"}
                for _, elementName in pairs(elementsToRemove) do
                    local element = menuFrame:FindFirstChild(elementName)
                    if element then
                        element:Destroy()
                    end
                end
            end
        end
    end
end

local function setWalkSpeed()
    if character and character:FindFirstChild("Humanoid") then
        character.Humanoid.WalkSpeed = 26
    end
end

local function checkChasingMonsters()
    local function monitorChasingValue(monsterModel)
        local chasingValue = monsterModel:FindFirstChild("ChasingValue")
        if chasingValue and chasingValue:IsA("ObjectValue") then
            RunService.RenderStepped:Connect(function()
                if chasingValue.Value and chasingValue.Value.Name == player.Name then
                    local monsterName = monsterModel.Name
                    if not notifiedChases[monsterName] then
                        sendNotification("Monster Chasing", monsterName .. " is chasing you!")
                        notifiedChases[monsterName] = true
                    end
                else
                    local monsterName = monsterModel.Name
                    if notifiedChases[monsterName] then
                        sendNotification("Monster Stopped Chasing", monsterName .. " has stopped chasing you!")
                        notifiedChases[monsterName] = nil
                    end
                end
            end)
        end
    end

        local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                if monstersFolder then
                    for _, monsterModel in pairs(monstersFolder:GetChildren()) do
                        if monsterModel:IsA("Model") then
                            monitorChasingValue(monsterModel)
                        end
                    end
                end
            end
        end
    end
end

-- Main execution
RunService.RenderStepped:Connect(function()
    removeSkillCheckElements()
    checkProximityPrompt()
    checkGeneratorStatus()
    highlightItemsMonstersGenerators()
    checkChasingMonsters()
    setWalkSpeed() -- Continuously apply the walkspeed
end)

while true do
    checkInventorySlots()
    wait(0.1) -- Check inventory slots every 100 milliseconds
end
