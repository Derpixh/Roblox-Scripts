local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local notifiedItems = {}
local notifiedGenerators = {}
local debounce = false
local pressedSlots = {}
local hasPressedE = {}

-- Flag to track if the chasing notification has been sent
local chasingNotificationSent = {}

-- Flag to track if the stop chasing notification has been sent
local stopChasingNotificationSent = {}

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
end

local function sendNotification(title, text)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5
    })
end

local function isCharacterNearPrompt(promptPart)
    local characterPosition = character.PrimaryPart.Position
    local promptPosition = promptPart.Position
    local distance = (characterPosition - promptPosition).Magnitude

    return distance < 5
end

local function isMonsterNearCharacter(monstersFolder)
    local characterPosition = character.PrimaryPart.Position
    
    for _, monsterModel in pairs(monstersFolder:GetChildren()) do
        if monsterModel:IsA("Model") then
            local monsterPosition = monsterModel.PrimaryPart.Position
            local distance = (characterPosition - monsterPosition).Magnitude
            if distance < 6 then
                return true
            end
        end
    end
    return false
end

local function checkProximityPrompt()
    if debounce then return end
    debounce = true

    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                -- Check Items folder
                local itemsFolder = roomModel:FindFirstChild("Items")
                if itemsFolder then
                    for _, itemModel in pairs(itemsFolder:GetChildren()) do
                        if itemModel:IsA("Model") and not notifiedItems[itemModel] then
                            local promptPart = itemModel:FindFirstChild("Prompt")
                            if promptPart then
                                local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                                if proximityPrompt and proximityPrompt.Enabled then
                                    if isCharacterNearPrompt(promptPart) then
                                        pressKey(Enum.KeyCode.E)
                                        notifiedItems[itemModel] = true
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    debounce = false
end

local function pressSpacebar()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, nil)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, nil)
end

local function notifyOncePerEvent(model, eventName, notification)
    if not notifiedGenerators[model] then
        notifiedGenerators[model] = {}
    end

    if not notifiedGenerators[model][eventName] then
        sendNotification(notification.Title, notification.Text)
        notifiedGenerators[model][eventName] = true
    end
end

local function checkGeneratorStatus()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                if generatorsFolder and monstersFolder then
                    for _, generatorModel in pairs(generatorsFolder:GetChildren()) do
                        if generatorModel:IsA("Model") then
                            local stats = generatorModel:FindFirstChild("Stats")
                            local completed = stats and stats:FindFirstChild("Completed")
                            local promptPart = generatorModel:FindFirstChild("Prompt")
                            local proximityPrompt = promptPart and promptPart:FindFirstChildOfClass("ProximityPrompt")
                            
                            if completed and completed:IsA("BoolValue") and not completed.Value and
                               proximityPrompt and proximityPrompt.Enabled and 
                               isCharacterNearPrompt(promptPart) and not isMonsterNearCharacter(monstersFolder) then

                                if not hasPressedE[generatorModel] then
                                    pressKey(Enum.KeyCode.E)
                                    hasPressedE[generatorModel] = true
                                end
                            else
                                hasPressedE[generatorModel] = nil
                            end

                            local playerCompletion = generatorModel:FindFirstChild("PlayerCompletion")
                            if playerCompletion then
                                for _, playerCompletionValue in pairs(playerCompletion:GetChildren()) do
                                    if playerCompletionValue:IsA("NumberValue") and playerCompletionValue.Name == player.Name then
                                        notifyOncePerEvent(generatorModel, "CompletionStarted", {
                                            Title = "Generator Completion",
                                            Text = "Extracting Ichor..."
                                        })

                                        if completed and completed.Value then
                                            notifyOncePerEvent(generatorModel, "Completed", {
                                                Title = "Generator Completed",
                                                Text = "Extracted Ichor Success!"
                                            })
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function checkInventorySlots()
    local player = game.Players.LocalPlayer
    if player then
        local playerName = player.Name
        local inGamePlayers = game.Workspace:FindFirstChild("InGamePlayers")
        if inGamePlayers then
            local playerModel = inGamePlayers:FindFirstChild(playerName)
            if playerModel then
                local inventory = playerModel:FindFirstChild("Inventory")
                if inventory then
                    local slot1 = inventory:FindFirstChild("Slot1")
                    local slot2 = inventory:FindFirstChild("Slot2")
                    local slot3 = inventory:FindFirstChild("Slot3")

                    local validValues = {
                        "Gumball",
                        "EnigmaCandy",
                        "ProteinBar",
                        "Chocolate",
                        "StealthCandy",
                        "SkillCheckCandy",
                        "SpeedCandy",
                        "ChocolateBox"
                    }

                    local pressedSlots = {}

                    local function pressKeyMultipleTimes(keyCode, times, delay)
                        for i = 1, times do
                            VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
                            VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
                            wait(delay)
                        end
                    end

                    local function checkAndPress(slot, keyCode)
                        if slot and table.find(validValues, slot.Value) and pressedSlots[slot.Name] ~= slot.Value then
                            if slot.Value == "Gumball" then
                                wait(0.1) -- Increased wait time for Gumball
                                pressKeyMultipleTimes(keyCode, 3, 0.1)
                                pressedSlots[slot.Name] = slot.Value
                            elseif slot.Value == "ChocolateBox" then
                                wait(0.1) -- Increased wait time for ChocolateBox
                                pressKeyMultipleTimes(keyCode, 5, 0.1)
                                pressedSlots[slot.Name] = slot.Value
                            else
                                wait(0.15) -- Wait 150 milliseconds before pressing the key for other valid values
                                VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
                                VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
                                pressedSlots[slot.Name] = slot.Value
                            end
                        elseif slot and (slot.Value == false or slot.Value == nil) then
                            pressedSlots[slot.Name] = nil
                        end
                    end

                    while true do
                        checkAndPress(slot1, Enum.KeyCode.One)
                        checkAndPress(slot2, Enum.KeyCode.Two)
                        checkAndPress(slot3, Enum.KeyCode.Three)
                        wait(0.1) -- Check every 100 milliseconds
                    end
                end
            end
        end
    end
end

local function highlightItemsMonstersGenerators()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                -- Highlighting Items (Green)
                local itemsFolder = roomModel:FindFirstChild("Items")
                if itemsFolder then
                    for _, itemModel in pairs(itemsFolder:GetChildren()) do
                        if itemModel:IsA("Model") and not itemModel:FindFirstChildOfClass("Highlight") then
                            local highlight = Instance.new("Highlight")
                            highlight.Parent = itemModel
                            highlight.FillColor = Color3.new(0, 1, 0) -- Green color
                            highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
                        end
                    end
                end
                
                -- Highlighting Monsters (Red)
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                if monstersFolder then
                    for _, monsterModel in pairs(monstersFolder:GetChildren()) do
                        if monsterModel:IsA("Model") and not monsterModel:FindFirstChildOfClass("Highlight") then
                            local highlight = Instance.new("Highlight")
                            highlight.Parent = monsterModel
                                                        highlight.FillColor = Color3.new(1, 0, 0) -- Red color
                            highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
                        end
                    end
                end

                -- Highlighting Generators (Orange)
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                if generatorsFolder then
                    for _, generatorModel in pairs(generatorsFolder:GetChildren()) do
                        if generatorModel:IsA("Model") and not generatorModel:FindFirstChildOfClass("Highlight") then
                            local highlight = Instance.new("Highlight")
                            highlight.Parent = generatorModel
                            highlight.FillColor = Color3.new(1, 0.5, 0) -- Orange color
                            highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
                        end
                    end
                end
            end
        end
    end

    -- Highlighting InGamePlayers (Light Blue with Dark Blue Outline)
    local inGamePlayers = game.Workspace:FindFirstChild("InGamePlayers")
    if inGamePlayers then
        for _, playerModel in pairs(inGamePlayers:GetChildren()) do
            if playerModel:IsA("Model") and not playerModel:FindFirstChildOfClass("Highlight") then
                local highlight = Instance.new("Highlight")
                highlight.Parent = playerModel
                highlight.FillColor = Color3.fromRGB(173, 216, 230) -- Light blue color
                highlight.OutlineColor = Color3.fromRGB(0, 0, 139) -- Dark blue color
            end
        end
    end
end

local function removeSkillCheckElements()
    local player = game.Players.LocalPlayer
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local screenGui = playerGui:FindFirstChild("ScreenGui")
        if screenGui then
            local menuFrame = screenGui:FindFirstChild("Menu")
            if menuFrame then
                local skillCheckFrame = menuFrame:FindFirstChild("SkillCheckFrame")
                if skillCheckFrame then
                    skillCheckFrame:Destroy()
                end

                local skillCheckMessage = menuFrame:FindFirstChild("SkillCheckMessage")
                if skillCheckMessage then
                    skillCheckMessage:Destroy()
                end

                local spaceBarPromptText = menuFrame:FindFirstChild("SpaceBarPromptText")
                if spaceBarPromptText then
                    spaceBarPromptText:Destroy()
                end
            end
        end
    end
end

local function setWalkSpeed()
    if character and character:FindFirstChild("Humanoid") then
        character.Humanoid.WalkSpeed = 26
    end
end

-- Function to continuously check for ChasingValue changes
local function checkForChasingValue()
    local currentRoom = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoom then
        for _, model in ipairs(currentRoom:GetChildren()) do
            local monstersFolder = model:FindFirstChild("Monsters")
            if monstersFolder then
                for _, monster in ipairs(monstersFolder:GetChildren()) do
                    local chasingValue = monster:FindFirstChild("ChasingValue")
                    if chasingValue and chasingValue:IsA("ObjectValue") then
                        -- Initialize flags for each monster
                        if chasingNotificationSent[monster.Name] == nil then
                            chasingNotificationSent[monster.Name] = false
                        end
                        if stopChasingNotificationSent[monster.Name] == nil then
                            stopChasingNotificationSent[monster.Name] = false
                        end
                        -- Check if monster is chasing
                        if chasingValue.Value and chasingValue.Value.Name == "Lightuxx" and not chasingNotificationSent[monster.Name] then
                            local inGamePlayers = game.Workspace:FindFirstChild("InGamePlayers")
                            if inGamePlayers and inGamePlayers:FindFirstChild("Lightuxx") then
                                game:GetService("StarterGui"):SetCore("SendNotification", {
                                    Title = "Monster Detector",
                                    Text = monster.Name .. " is chasing you",
                                    Duration = 5
                                })
                                chasingNotificationSent[monster.Name] = true
                                stopChasingNotificationSent[monster.Name] = false
                            end
                        -- Check if monster has stopped chasing
                        elseif chasingValue.Value == nil and chasingNotificationSent[monster.Name] and not stopChasingNotificationSent[monster.Name] then
                            game:GetService("StarterGui"):SetCore("SendNotification", {
                                Title = "Monster Detector",
                                Text = monster.Name .. " has stopped chasing you",
                                Duration = 5
                            })
                            stopChasingNotificationSent[monster.Name] = true
                            chasingNotificationSent[monster.Name] = false
                        end
                    end
                end
            end
        end
    end
end

-- Main execution
RunService.RenderStepped:Connect(function()
    removeSkillCheckElements()
    checkProximityPrompt()
    checkGeneratorStatus()
    highlightItemsMonstersGenerators()
    setWalkSpeed() -- Continuously apply the walk speed
    checkForChasingValue() -- Check for chasing value changes
end)

while true do
    checkInventorySlots()
    wait(0.1) -- Check inventory slots every 100 milliseconds
end
