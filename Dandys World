local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Dandys World - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local twistedsTab = window:CreateTab("Twisteds")
local twistedsSection = twistedsTab:CreateSection("Twisteds")

local highlightToggleEnabled = false

local function removeHighlights()
    local currentRoom = workspace:FindFirstChild("CurrentRoom")
    if currentRoom then
        for _, model in ipairs(currentRoom:GetChildren()) do
            if model:IsA("Model") then
                local monstersFolder = model:FindFirstChild("Monsters")
                if monstersFolder then
                    for _, monster in ipairs(monstersFolder:GetChildren()) do
                        if monster:IsA("Model") then
                            local highlight = monster:FindFirstChildOfClass("Highlight")
                            if highlight then
                                highlight:Destroy()
                            end
                        end
                    end
                end
            end
        end
    end
end

local highlightToggle = twistedsTab:CreateToggle({
    Name = "Highlight Twisteds (You Can Enable/Disable It)",
    SectionParent = twistedsSection,
    CurrentValue = false,
    Callback = function(value)
        highlightToggleEnabled = value

        if not value then
            highlightToggleEnabled = false
            removeHighlights()
            return
        end

        while highlightToggleEnabled do
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, model in ipairs(currentRoom:GetChildren()) do
                    if model:IsA("Model") then
                        local monstersFolder = model:FindFirstChild("Monsters")
                        if monstersFolder then
                            for _, monster in ipairs(monstersFolder:GetChildren()) do
                                if monster:IsA("Model") then
                                    if not monster:FindFirstChildOfClass("Highlight") then
                                        local highlight = Instance.new("Highlight")
                                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                                        highlight.Parent = monster
                                    end
                                end
                            end
                        end
                    end
                end
            end
            wait()
        end
    end
})

local notificationsSection = twistedsTab:CreateSection("Notifications")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local autoNotifyConnection = nil
local lastChasingValues = {}

twistedsTab:CreateToggle({
    Name = "Auto Notify Chasing Twisteds",
    SectionParent = notificationsSection,
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            autoNotifyConnection = RunService.Heartbeat:Connect(function()
                local currentRoom = workspace:FindFirstChild("CurrentRoom")
                if currentRoom then
                    local model = currentRoom:FindFirstChildWhichIsA("Model")
                    if model then
                        local monstersFolder = model:FindFirstChild("Monsters")
                        if monstersFolder then
                            for _, monster in ipairs(monstersFolder:GetChildren()) do
                                if monster:IsA("Model") and string.find(monster.Name, "Monster") then
                                    local chasingValue = monster:FindFirstChild("ChasingValue")
                                    if chasingValue then
                                        local previousState = lastChasingValues[monster] or ""
                                        local currentState = chasingValue.Value
                                        if previousState ~= currentState then
                                            if currentState == LocalPlayer.Name and previousState == "" then
                                                Rayfield:Notify({
                                                    Title = "Twisted Chasing Notifier",
                                                    Content = monster.Name .. " is currently chasing you!",
                                                    Duration = 6.5,
                                                    Image = 4483362458
                                                })
                                            elseif previousState == LocalPlayer.Name and currentState == "" then
                                                Rayfield:Notify({
                                                    Title = "Twisted Chasing Notifier",
                                                    Content = monster.Name .. " has stopped chasing you!",
                                                    Duration = 6.5,
                                                    Image = 4483362458
                                                })
                                            end
                                            lastChasingValues[monster] = currentState
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        else
            if autoNotifyConnection then
                autoNotifyConnection:Disconnect()
                autoNotifyConnection = nil
            end
            lastChasingValues = {}
        end
    end
})

Rayfield:LoadConfiguration()
