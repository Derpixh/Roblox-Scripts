local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local notifiedItems = {}
local notifiedGenerators = {}
local debounce = false
local pressedSlots = {}

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, nil)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, nil)
end

local function sendNotification(title, text)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5
    })
end

local function sendPickupNotification(itemName)
    local words = itemName:split(" ")
    local secondWord = words[2] or itemName
    sendNotification("Auto Item Collector", secondWord .. " has been collected")
end

local function sendItemUsageNotification(itemName)
    if not pressedSlots[itemName] then
        sendNotification("Auto Item Usage", itemName .. " has been used")
        pressedSlots[itemName] = true
    end
end

local function isCharacterNearPrompt(promptPart)
    local characterPosition = character.PrimaryPart.Position
    local promptPosition = promptPart.Position
    local distance = (characterPosition - promptPosition).Magnitude

    return distance < 5
end

local function checkProximityPrompt()
    if debounce then return end
    debounce = true

    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                -- Check Items folder
                local itemsFolder = roomModel:FindFirstChild("Items")
                if itemsFolder then
                    for _, itemModel in pairs(itemsFolder:GetChildren()) do
                        if itemModel:IsA("Model") and not notifiedItems[itemModel] then
                            local promptPart = itemModel:FindFirstChild("Prompt")
                            if promptPart then
                                local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                                if proximityPrompt and proximityPrompt.Enabled then
                                    if isCharacterNearPrompt(promptPart) then
                                        pressKey(Enum.KeyCode.E)
                                        sendPickupNotification(itemModel.Name)
                                        notifiedItems[itemModel] = true
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    debounce = false
end

local function pressSpacebar()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, nil)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, nil)
end

local function checkSkillCheck()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local screenGui = playerGui:FindFirstChild("ScreenGui")
        if screenGui then
            local menuFrame = screenGui:FindFirstChild("Menu")
            if menuFrame then
                local skillCheckFrame = menuFrame:FindFirstChild("SkillCheckFrame")
                if skillCheckFrame then
                    local marker = skillCheckFrame:FindFirstChild("Marker")
                    local goldArea = skillCheckFrame:FindFirstChild("GoldArea")

                    if marker and goldArea then
                        local markerPos = marker.AbsolutePosition
                        local goldAreaPos = goldArea.AbsolutePosition
                        local goldAreaSize = goldArea.AbsoluteSize

                        if markerPos.X >= goldAreaPos.X and markerPos.X <= (goldAreaPos.X + goldAreaSize.X) then
                            pressSpacebar()
                        end
                    end
                end
            end
        end
    end
end

local function notifyOncePerEvent(model, eventName, notification)
    if not notifiedGenerators[model] then
        notifiedGenerators[model] = {}
    end

    if not notifiedGenerators[model][eventName] then
        sendNotification(notification.Title, notification.Text)
        notifiedGenerators[model][eventName] = true
    end
end

local function checkGeneratorStatus()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                if generatorsFolder then
                    for _, generatorModel in pairs(generatorsFolder:GetChildren()) do
                        if generatorModel:IsA("Model") then
                            local playerCompletion = generatorModel:FindFirstChild("PlayerCompletion")
                            if playerCompletion then
                                for _, playerCompletionValue in pairs(playerCompletion:GetChildren()) do
                                    if playerCompletionValue:IsA("NumberValue") and playerCompletionValue.Name == player.Name then
                                        notifyOncePerEvent(generatorModel, "CompletionStarted", {
                                            Title = "Generator Completion",
                                            Text = "Extracting Ichor...",
                                            Duration = 5
                                        })

                                        local stats = generatorModel:FindFirstChild("Stats")
                                        if stats then
                                            local completed = stats:FindFirstChild("Completed")
                                            if completed and completed:IsA("BoolValue") and completed.Value then
                                                notifyOncePerEvent(generatorModel, "Completed", {
                                                    Title = "Generator Completed",
                                                    Text = "Extracted Ichor Success!",
                                                    Duration = 5
                                                })
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function checkInventorySlots()
    local inGamePlayers = game.Workspace:FindFirstChild("InGamePlayers")
    if inGamePlayers then
        local havvokz = inGamePlayers:FindFirstChild("Havvokz")
        if havvokz then
            local inventory = havvokz:FindFirstChild("Inventory")
            if inventory then
                local slot1 = inventory:FindFirstChild("Slot1")
                local slot2 = inventory:FindFirstChild("Slot2")
                local slot3 = inventory:FindFirstChild("Slot3")

                local validValues = {
                    "Gumball",
                    "Pop",
                    "EnigmaCandy",
                    "Bandage",
                    "ProteinBar",
                    "Chocolate",
                    "StealthCandy",
                    "SkillCheckCandy"
                }

                local function checkAndPress(slot, keyCode)
                    if slot and table.find(validValues, slot.Value) then
                        pressKey(keyCode)
                        sendItemUsageNotification(slot.Value)
                    end
                end

                local function onValueChanged(slot, keyCode)
                    slot:GetPropertyChangedSignal("Value"):Connect(function()
                        if slot.Value == "None" then
                            pressedSlots[slot] = nil
                        elseif table.find(validValues, slot.Value) then
                            pressedSlots[slot] = true
                        end
                    end)
                end

                onValueChanged(slot1, Enum.KeyCode.One)
                onValueChanged(slot2, Enum.KeyCode.Two)
                onValueChanged(slot3, Enum.KeyCode.Three)

                if slot1 and pressedSlots[slot1] then
                    checkAndPress(slot1, Enum.KeyCode.One)
                end
                if slot2 and pressedSlots[slot2] then
                    checkAndPress(slot2, Enum.KeyCode.Two)
                end
                if slot3 and pressedSlots[slot3] then
                    checkAndPress(slot3, Enum.KeyCode.Three)
                end
            end
        end
    end
end

local function highlightModels(model, fillColor)
    if not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.FillColor = fillColor
        highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
    end
end

local function highlightContents(folder, fillColor)
    if folder then
        for _, child in pairs(folder:GetChildren()) do
            if child:IsA("Model") then
                highlightModels(child, fillColor)
            end
        end
    end
end

local function highlightItemsMonstersGenerators()
    local currentRoomFolder = game.Workspace:FindFirstChild("CurrentRoom")
    
    if currentRoomFolder then
        for _, roomModel in pairs(currentRoomFolder:GetChildren()) do
            if roomModel:IsA("Model") then
                -- Highlighting Items (Green)
                local itemsFolder = roomModel:FindFirstChild("Items")
                highlightContents(itemsFolder, Color3.new(0, 1, 0))
                
                -- Highlighting Monsters (Red)
                local monstersFolder = roomModel:FindFirstChild("Monsters")
                highlightContents(monstersFolder, Color3.new(1, 0, 0))

                -- Highlighting Generators (Orange)
                local generatorsFolder = roomModel:FindFirstChild("Generators")
                highlightContents(generatorsFolder, Color3.new(1, 0.5, 0))
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    checkSkillCheck()
    checkProximityPrompt()
    checkGeneratorStatus()
    highlightItemsMonstersGenerators()
end)

while true do
    checkInventorySlots()
    wait(0.1) -- Check inventory slots every 100 milliseconds
end
