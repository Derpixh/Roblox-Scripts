local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Dandys World - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Derpixh",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Derpixh's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local tabTwisteds = window:CreateTab("Twisteds")
local sectionHighlightTwisteds = tabTwisteds:CreateSection("Highlight Twisteds")

local autoHighlightToggle = tabTwisteds:CreateToggle({
    Name = "Auto Highlight Twisteds",
    CurrentValue = false,
    Flag = "AutoHighlight",
    Section = sectionHighlightTwisteds,
    Callback = function(Value)
        _G.AutoHighlight = Value

        local RunService = game:GetService("RunService")
        local function addHighlight(model)
            if not model:FindFirstChildOfClass("Highlight") then
                local highlight = Instance.new("Highlight")
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillColor = Color3.fromRGB(255, 0, 0)
                highlight.Parent = model
            end
        end

        local function removeHighlight(model)
            local highlight = model:FindFirstChildOfClass("Highlight")
            if highlight then
                highlight:Destroy()
            end
        end

        local function checkAndUpdateHighlights()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local monstersFolder = roomModel:FindFirstChild("Monsters")
                        if monstersFolder then
                            for _, monster in pairs(monstersFolder:GetChildren()) do
                                if monster:IsA("Model") then
                                    if _G.AutoHighlight then
                                        addHighlight(monster)
                                    else
                                        removeHighlight(monster)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        RunService.Heartbeat:Connect(checkAndUpdateHighlights)
    end,
})

local sectionShowAlerts = tabTwisteds:CreateSection("Show Alerts")

local autoAlertChasingToggle = tabTwisteds:CreateToggle({
    Name = "Auto Alert Chasing",
    CurrentValue = false,
    Flag = "AutoAlertChasing",
    Section = sectionShowAlerts,
    Callback = function(Value)
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer

        local function alertChasing(model)
            local chasingValue = model:FindFirstChild("ChasingValue")
            if chasingValue and chasingValue:IsA("ObjectValue") then
                local connection
                connection = chasingValue:GetPropertyChangedSignal("Value"):Connect(function()
                    if chasingValue.Value == localPlayer.Name then
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Twisted Alerter",
                            Text = model.Name .. " is currently chasing you",
                            Duration = 5
                        })
                    end
                end)
                
                model.AncestryChanged:Connect(function(_, parent)
                    if not parent then
                        connection:Disconnect()
                    end
                end)
            end
        end

        local function checkAndAlertChasing()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local monstersFolder = roomModel:FindFirstChild("Monsters")
                        if monstersFolder then
                            for _, monster in pairs(monstersFolder:GetChildren()) do
                                if monster:IsA("Model") then
                                    alertChasing(monster)
                                end
                            end
                        end
                    end
                end
            end
        end

        if Value then
            RunService.Heartbeat:Connect(checkAndAlertChasing)
        else
            for _, connection in pairs(RunService.Heartbeat:GetConnections()) do
                connection:Disconnect()
            end
        end
    end,
})

local tabItems = window:CreateTab("Items")

local sectionHighlightItems = tabItems:CreateSection("Highlight Items")

local autoHighlightItemsToggle = tabItems:CreateToggle({
    Name = "Auto Highlight Items",
    CurrentValue = false,
    Flag = "AutoHighlightItems",
    Section = sectionHighlightItems,
    Callback = function(Value)
        local RunService = game:GetService("RunService")

        local function addHighlight(model)
            if not model:FindFirstChildOfClass("Highlight") then
                local highlight = Instance.new("Highlight")
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillColor = Color3.fromRGB(0, 255, 0)
                highlight.Parent = model
            end
        end

        local function removeHighlight(model)
            local highlight = model:FindFirstChildOfClass("Highlight")
            if highlight then
                highlight:Destroy()
            end
        end

        local function checkAndUpdateItems()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local itemsFolder = roomModel:FindFirstChild("Items")
                        if itemsFolder then
                            for _, item in pairs(itemsFolder:GetChildren()) do
                                if item:IsA("Model") then
                                    if Value then
                                        addHighlight(item)
                                    else
                                        removeHighlight(item)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        if Value then
            highlightConnection = RunService.Heartbeat:Connect(checkAndUpdateItems)
        else
            if highlightConnection then
                highlightConnection:Disconnect()
                highlightConnection = nil
                local currentRoom = workspace:FindFirstChild("CurrentRoom")
                if currentRoom then
                    for _, roomModel in pairs(currentRoom:GetChildren()) do
                        if roomModel:IsA("Model") then
                            local itemsFolder = roomModel:FindFirstChild("Items")
                            if itemsFolder then
                                for _, item in pairs(itemsFolder:GetChildren()) do
                                    if item:IsA("Model") then
                                        removeHighlight(item)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end,
})

local sectionPickUpItems = tabItems:CreateSection("Pick-Up Items")

local autoPickUpItemsToggle = tabItems:CreateToggle({
    Name = "Auto Pick-Up Items",
    CurrentValue = false,
    Flag = "AutoPickUpItems",
    Section = sectionPickUpItems,
    Callback = function(Value)
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer

        local function pickUpItem(model)
            local promptPart = model:FindFirstChild("Prompt")
            if promptPart and promptPart:IsA("Part") then
                local proximityPrompt = promptPart:FindFirstChildOfClass("ProximityPrompt")
                if proximityPrompt and proximityPrompt:IsA("ProximityPrompt") and proximityPrompt.Enabled then
                    proximityPrompt:InputHoldBegin()
                    proximityPrompt:InputHoldEnd()
                end
            end
        end

        local function checkAndPickUpItems()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local itemsFolder = roomModel:FindFirstChild("Items")
                        if itemsFolder then
                            for _, item in pairs(itemsFolder:GetChildren()) do
                                if item:IsA("Model") then
                                    pickUpItem(item)
                                end
                            end
                        end
                    end
                end
            end
        end

        if Value then
            pickUpItemsConnection = RunService.Heartbeat:Connect(checkAndPickUpItems)
        else
            if pickUpItemsConnection then
                pickUpItemsConnection:Disconnect()
                pickUpItemsConnection = nil
            end
        end
    end,
})

local tabGenerators = window:CreateTab("Generators")

local sectionHighlightGenerators = tabGenerators:CreateSection("Highlight Generators")

local autoHighlightGeneratorsToggle = tabGenerators:CreateToggle({
    Name = "Auto Highlight Generators",
    CurrentValue = false,
    Flag = "AutoHighlightGenerators",
    Section = sectionHighlightGenerators,
    Callback = function(Value)
        local RunService = game:GetService("RunService")

        local function addHighlight(model)
            if not model:FindFirstChildOfClass("Highlight") then
                local highlight = Instance.new("Highlight")
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillColor = Color3.fromRGB(0, 255, 255)
                highlight.Parent = model
            end
        end

        local function removeHighlight(model)
            local highlight = model:FindFirstChildOfClass("Highlight")
            if highlight then
                highlight:Destroy()
            end
        end

        local function checkAndUpdateGenerators()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local generatorsFolder = roomModel:FindFirstChild("Generators")
                        if generatorsFolder then
                            for _, generator in pairs(generatorsFolder:GetChildren()) do
                                if generator:IsA("Model") and generator.Name == "Generator" then
                                    if Value then
                                        addHighlight(generator)
                                    else
                                        removeHighlight(generator)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        if Value then
            generatorHighlightConnection = RunService.Heartbeat:Connect(checkAndUpdateGenerators)
        else
            if generatorHighlightConnection then
                generatorHighlightConnection:Disconnect()
                generatorHighlightConnection = nil
                local currentRoom = workspace:FindFirstChild("CurrentRoom")
                if currentRoom then
                    for _, roomModel in pairs(currentRoom:GetChildren()) do
                        if roomModel:IsA("Model") then
                            local generatorsFolder = roomModel:FindFirstChild("Generators")
                            if generatorsFolder then
                                for _, generator in pairs(generatorsFolder:GetChildren()) do
                                    if generator:IsA("Model") and generator.Name == "Generator" then
                                        removeHighlight(generator)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end,
})

local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local sectionExtractIchor = tabGenerators:CreateSection("Extract Ichor")

local autoExtractIchorToggle = tabGenerators:CreateToggle({
    Name = "Auto Extract Ichor",
    CurrentValue = false,
    Flag = "AutoExtractIchor",
    Section = sectionExtractIchor,
    Callback = function(Value)
        local connections = {}

        local function extractIchor(model)
            local promptPart = model:FindFirstChild("Prompt")
            if promptPart and promptPart:IsA("Part") then
                local attachment = promptPart:FindFirstChildOfClass("Attachment")
                if attachment then
                    local proximityPrompt = attachment:FindFirstChildOfClass("ProximityPrompt")
                    if proximityPrompt and proximityPrompt:IsA("ProximityPrompt") then
                        local connection
                        connection = proximityPrompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                            if proximityPrompt.Enabled and proximityPrompt.HoldDuration == 0 then
                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
                            end
                        end)
                        table.insert(connections, connection)
                    end
                end
            end
        end

        local function monitorGenerators()
            local currentRoom = workspace:FindFirstChild("CurrentRoom")
            if currentRoom then
                for _, roomModel in pairs(currentRoom:GetChildren()) do
                    if roomModel:IsA("Model") then
                        local generatorsFolder = roomModel:FindFirstChild("Generators")
                        if generatorsFolder then
                            for _, generator in pairs(generatorsFolder:GetChildren()) do
                                if generator:IsA("Model") and generator.Name == "Generator" then
                                    extractIchor(generator)
                                end
                            end
                        end
                    end
                end
            end
        end

        if Value then
            monitorGenerators()
        else
            for _, connection in pairs(connections) do
                connection:Disconnect()
            end
            table.clear(connections)
        end
    end,
})
